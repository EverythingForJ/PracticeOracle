CREATE OR REPLACE PROCEDURE SP_OPERATORS
(
    FIRST IN NUMBER,
    SECOND IN NUMBER
)
IS
BEGIN
    DBMS_OUTPUT.PUT_LINE(FIRST || ' + ' || SECOND || ' = ' || (FIRST+SECOND));
    DBMS_OUTPUT.PUT_LINE(FIRST || ' - ' || SECOND || ' = ' || (FIRST-SECOND));
    DBMS_OUTPUT.PUT_LINE(FIRST || ' x ' || SECOND || ' = ' || (FIRST*SECOND));
    DBMS_OUTPUT.PUT_LINE(FIRST || ' / ' || SECOND || ' = ' || (FIRST/SECOND));
END;

EXEC SP_OPERATORS(4,9);


CREATE OR REPLACE PROCEDURE SP_HUNDRED_SUM
IS
    I    NUMBER;
    TOTAL NUMBER := 0;
BEGIN
    FOR I IN 1..100 LOOP
        TOTAL := TOTAL+I;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('합계는 ' || TOTAL || '입니다.');
END;

EXEC SP_HUNDRED_SUM;


CREATE OR REPLACE PROCEDURE SP_HUNDRED_SUM_V1
(
    V_LAST IN NUMBER
)
IS
    I    NUMBER;
    TOTAL NUMBER := 0;
BEGIN
    FOR I IN 1..V_LAST LOOP
        TOTAL := TOTAL+I;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE('1부터 ' || V_LAST || '까지의 합계는 ' || TOTAL || '입니다.');
END;

EXEC SP_HUNDRED_SUM_V1(50);


CREATE OR REPLACE PROCEDURE SP_HUNDRED_SUM_V2
(
    V_START IN NUMBER,
    V_END IN NUMBER
)
IS
    I    NUMBER;
    TOTAL NUMBER := 0;
BEGIN
    FOR I IN V_START..V_END LOOP
        TOTAL := TOTAL+I;
    END LOOP;
    DBMS_OUTPUT.PUT_LINE(V_START || '부터 ' || V_END || '까지의 합계는 ' || TOTAL || '입니다.');
END;

EXEC SP_HUNDRED_SUM_V2(50,100);


CREATE OR REPLACE PROCEDURE EMP_SAL_UPDATE
(
    V_EMPNO IN EMP.EMPNO%TYPE,
    V_SAL IN EMP.SAL%TYPE
)
IS
BEGIN
    UPDATE EMP
    SET SAL = V_SAL
    WHERE EMPNO = V_EMPNO;
    COMMIT;
END;

REM 사번을 받아 삭제하는 프로시저
CREATE OR REPLACE PROCEDURE SP_EMP_DELETE
(
    V_EMPNO IN EMP.EMPNO%TYPE
)
IS
BEGIN
    DELETE FROM EMP WHERE EMPNO = V_EMPNO;
    -- JAVA가 COMMIT
END;

CREATE OR REPLACE PROCEDURE EMP_INPUT
(
    V_ENAME IN EMP.ENAME%TYPE,
    V_JOB  IN EMP.JOB%TYPE,
    V_MGR   IN EMP.MGR%TYPE,
    V_SAL   IN EMP.SAL%TYPE
)
IS
    V_DEPTNO EMP.DEPTNO%TYPE;
    V_COMM EMP.COMM%TYPE;
BEGIN
    SELECT DEPTNO INTO V_DEPTNO 
    FROM EMP 
    WHERE EMPNO = V_MGR;
    
    IF UPPER(V_JOB) = 'SALESMAN' THEN V_COMM := 0;
    ELSE V_COMM := NULL;
    END IF;
    
    INSERT INTO EMP (EMPNO, ENAME, JOB, HIREDATE, MGR, SAL, DEPTNO, COMM)
    VALUES(EMP_EMPNO_SEQ.NEXTVAL, V_ENAME, V_JOB, SYSDATE, V_MGR, V_SAL, V_DEPTNO, V_COMM);
    COMMIT;
END;

-- OUT

CREATE OR REPLACE PROCEDURE SP_TEST1
IS
    V_NAME VARCHAR2(20);
BEGIN
    V_NAME := '한지민';
    DBMS_OUTPUT.PUT_LINE('나의 이름은 ' || V_NAME || '입니다.');
END;
EXEC SP_TEST1;

CREATE OR REPLACE PROCEDURE SP_TEST_V1
(
    P_NAME IN VARCHAR2
)
IS
    V_NAME VARCHAR2(20);
BEGIN
    V_NAME := P_NAME;
    DBMS_OUTPUT.PUT_LINE('나의 이름은 ' || V_NAME || '입니다.');
END;
EXEC SP_TEST_V1('김지민');

CREATE OR REPLACE PROCEDURE SP_TEST_V2
(
    P_NAME OUT VARCHAR2
)
IS
BEGIN
    P_NAME := '나의 이름은 한지민입니다.';
END;
VAR G_NAME VARCHAR2(50);
EXEC SP_TEST_V2(:G_NAME);
PRINT G_NAME;

DECLARE
    V_NAME VARCHAR2(50);
BEGIN
    SP_TEST_V2(V_NAME);
    DBMS_OUTPUT.PUT_LINE(V_NAME);
END;

-- 사원 수를 알려주세요
CREATE OR REPLACE PROCEDURE SP_EMP_COUNT
(
    CNT OUT NUMBER
)
IS
BEGIN
    SELECT COUNT(*) INTO CNT
    FROM EMP;
    -- DBMS_OUTPUT.PUT_LINE('사원 수는 ' || CNT || '명입니다.');
END;
-- EXEC SP_EMP_COUNT;

DECLARE
    V_CNT NUMBER;
BEGIN
    SP_EMP_COUNT(V_CNT);
    DBMS_OUTPUT.PUT_LINE('사원 수는 ' || V_CNT || '명입니다.');
END;

CREATE OR REPLACE PROCEDURE SP_OPERATORS
(
    V_FIRST IN NUMBER,
    V_SECOND IN NUMBER,
    V_OP IN CHAR,
    V_RESULT OUT NUMBER
)
IS
BEGIN
    CASE
        WHEN V_OP = '+' THEN V_RESULT := V_FIRST + V_SECOND;
        WHEN V_OP = '-' THEN V_RESULT := V_FIRST - V_SECOND;
        WHEN V_OP = 'x' THEN V_RESULT := V_FIRST * V_SECOND;
        ELSE V_RESULT := V_FIRST / V_SECOND;
    END CASE;
END;

ACCEPT P_FIRST PROMPT '첫 번째 숫자 : ';
ACCEPT P_OP PROMPT '연산자(+,-,*,/) : ';
ACCEPT P_SECOND PROMPT '두 번째 숫자 : ';
DECLARE
    V_FIRST NUMBER := &P_FIRST;
    V_SECOND NUMBER := &P_SECOND;
    V_OP CHAR(1) := '&P_OP';
    P_RESULT NUMBER;
BEGIN
    SP_OPERATORS(V_FIRST, V_SECOND, V_OP, P_RESULT);
    DBMS_OUTPUT.PUT_LINE(V_FIRST || V_OP || V_SECOND || ' = ' || P_RESULT);
END;

-- 사번을 받아 사원이름과 봉급 검색
CREATE OR REPLACE PROCEDURE SP_EMP_SELECT
(
    V_EMPNO IN  EMP.EMPNO%TYPE,
    V_ENAME OUT EMP.ENAME%TYPE,
    V_SAL OUT EMP.SAL%TYPE
)
IS
BEGIN
    SELECT ENAME, SAL INTO V_ENAME, V_SAL
    FROM EMP
    WHERE EMPNO = V_EMPNO;
END;

ACCEPT P_EMPNO PROMPT '사원 번호 : ';
DECLARE
    V_EMPNO EMP.EMPNO%TYPE := &P_EMPNO;
    V_ENAME EMP.ENAME%TYPE;
    V_SAL EMP.SAL%TYPE;
BEGIN
    SP_EMP_SELECT(V_EMPNO, V_ENAME, V_SAL); -- V_ENAME
    DBMS_OUTPUT.PUT_LINE('NAME : ' || V_ENAME);
    DBMS_OUTPUT.PUT_LINE('SALARY : ' || V_SAL);
END;

