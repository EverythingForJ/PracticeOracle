- SQL PLUS -
CREATE USER jun IDENTIFIED BY 111111;
// 사용자아이디jun과 비밀번호 11111생성

// 오류 ORA-65096: 발생시
ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
// 입력. 세션 변경됨.
// 후에 다시 생성시 생성완료가능.

GRANT DBA TO jun;
// 최고 권한 부여
// 이후 생성 ID와 비번 입력후 접속 가능해짐

CREAT TABLE topic (
	id NUMBER NOT NULL,
	title VARCHAR2(50) NOT NULL,
	description VARCHAR2(4000),
	created DATE NOT NULL
);

// 테이블을 만든다. 
// id/컬럼명(내 마음대로) NUMBER/데이터형식은 숫자여야한다. NOT NULL/데이터값이 무조건있어야한다.
// title/컬럼명 VARCHAR2(50)/제목이 50글자이상이면 짤린다. 
// description/컬럼명 VARCHAR2(4000)/VARCHAR는 최대4000글자. NULL/쓰지않아도된다.
// created DATE/날짜,시간을 위한 데이터타입

SELECT table_name FROM all_tables WHERE OWNER = 'JUN';
// 모든 테이블 목록을 보여준다.
// 사용자ID 대문자 사용해야 가능.

// topic 테이블에 행 추가하기
INSERT INTO topic
  (id, title, description,created)
  VALUES
  (1, 'ORACLE', 'ORACLE IS...', SYSDATE);

//	(id, title, description, created) // 이 컬럼들에 값을 넣겠다.
//	VALUES // 그 값의 구체적인 내용은
//	(1,'ORACLE','ORACLE IS ...',SYSDATE(현재시간을 적는다));

commit;
//행을 추가하거나 수정작업을 했다면 반드시 COMMIT;명령을 수행한다.

--------------------------------------------------------------------------------------------------

// 데이터를 읽는 법
SELECT * FROM topic;
//모든 컬럼을 가져오겠다 = *
// topic에서 = from topic


// 컬럼을 제한하는 방법
SELECT id,title, created FROM topic;
// id,title, created 컬럼만 보겠다.
SELECT * FROM topic WHERE id =1;
// id 컬럼에 값이 1인 행만 보고싶다.
SELECT * FROM topic WHERE id >1;
// id 컬럼에 값이 1보다 큰 행만 보고싶다.
SELECT id,title, created FROM topic WHERE id = 1;
// id가 1인 행의 id,title, created값을 보여준다.


// 정렬방법
SELECT * FROM topic ORDER BY id DESC;
// id 컬럼기준으로 DESC방법(내림차순)으로 정렬하겠다.
// ASC는 오름차순
SELECT * FROM topic ORDER BY title DESC;
// title컬럼 기준으로 알파벳내림차순으로 정렬(a~z)


// 데이터가 많을 경우 모든 컬럼을 가져올시 과부하
// 이유때문에 데이터를 조각조각 가져오는 방법
SELECT * FROM topic
	OFFSET 1 ROWS;
// 0번째이후의 행들, 즉 1행부터 가져온다.

SELECT * FROM topic
	OFFSET 2 ROWS;
// 1번째이후의 행들, 즉 2번째 행부터 가져온다.

SELECT * FROM topic
	FETCH NEXT 1 ROWS ONLY;
// 첫행(0행)기준으로 하나의 행만 가져온다.

SELECT * FROM topic
	OFFSET 1 ROWS
	FETCH NEXT 1 ROWS ONLY;
// 0번째행 이후의 / 하나의 행만 가져온다.

SELECT * FROM topic
	OFFSET 1 ROWS
	FETCH NEXT 1 ROWS ONLY;
// 0번째행 이후의 / 두개의 행만 가져온다.

------------------------------------------------------------------------------------------

UPDATE topic 
	SET
	title = 'MSSQL',
	description = 'MSSQL is ...'
	WHERE
	id = 3;
// 행의 데이터를 바꾼다.
// id=3의 행의 title과 description을 바꾼다.
// where를 안쓸경우 모든 행의 데이터가 바뀌므로 주의

commit;
// 작업한 내용이 실제 반영되도록 한다.

DELETE FROM topic WHERE id = 3;
// topic테이블의 id=3인 행을 삭제하겠다/

// 테이블 지우기
DROP TABLE topic;
// topic이란 테이블을 지운다.
// commit 할 필요 없음.


// 기본키,주키,프라이머리키란 다른 것과 구분하는 식별자.
// 중요한 것은 중복되면 안된다!
// 테이블 생성 때 만들어도 되고, 후에 수정해도되지만.
// 생성할 때 만드는 것을 추천
CREAT TABLE topic (
	id NUMBER NOT NULL,
	title VARCHAR2(50) NOT NULL,
	description VARCHAR2(4000),
	created DATE NOT NULL,
	CONSTRAINT PK_TOPIC PRIMARY KEY(id)
);
// CONSTRAINT는 제약조건이라는 뜻
// 제약조건으로 프라이머리키를 하고 
// 이름은 PK_TOPIC이다.
// ID 컬럼에다 프라이머리키를 건다.
// 앞으로 insert할때 id값이 같은 행을 추가하려한다면 무결성 제약조건에 위배되며 만들어지지않는다.

// SELECT id, title FROM topic WHERE id = 2;
// 데이터를 검색할때 만약 프라이머리키를 적용한 컬럼을 기준으로 데이터를 찾는다면
// 프라이머리키가 없을때 보다 훨씬 빠르게 데이터를 찾을 수 있다.
// 필수는 아니지만 경제성이 훨씬 뛰어나다.
CONSTRAINT PK_TOPIC PRIMARY KEY(id, title)
// id와 title에 프라이머리키를 건다.(복합키)

---------------------------------------------------------------------------------------------------

CREATE SEQUENCE SEQ_TOPIC;
// 시퀀스를 만든다. 시퀀스의 이름은 SEQ_topic이다.
// 이제 자동으로 프라이머리키가 중복되지않게 1씩증가시켜주는 방법
INSERT INTO topic
  (id, title, description,created)
  VALUES
  (SEQ_TOPIC.NEXTVAL, 'MongoDB', 'MongoDB IS...', SYSDATE);
// 행을 추가하며, 프라이머리키 값에 SEQ_TOPIC.NEXTVAL를 사용.
// 프라이머리키가 가지고 있는 값에 1을 추가하여, 행 생성.

SELECT SEQ_TOPIC.CURRVAL FROM TOPIC;
// TOPIC테이블이 가진 모든 행의 시퀀스의 현재값을 보여준다.
// 가진 행만큼 시퀀스를 보여줌

SELECT SEQ_TOPIC.CURRVAL FROM DUAL;
// DUAL은 가상의 테이블로 모든 행의 시퀀스가 아닌, 최종 시퀀스값
// 하나만 보여준다.
// 시퀀스와 프라이머리키는 하나의 패밀리이며, 같이 사용해야 효율이 높아진다.

// join 알아보기
SELECT * FROM topic LEFT JOIN author ON topic.author_id=author.id;
// topic 테이블 옆에 author 테이블을 왼쪽에 붙여서 같이 보여줘.
// topic 테이블의 author_id 컬럼의 데이터와 author테이블의 id컬럼의 데이터값이 동일한 값을 붙여보여준다.
// 다른 두 테이블을 마치 하나의 테이블처럼 보여주는 좋은 가독성을 가진 기능

SELECT TOPIC.ID TOPIC_ID, TITLE, NAME FROM TOPIC
// TOPIC 테이블의 ID 컬럼을 알아보기 쉽게하기 위해 TOPIC_ID라는 별명을 붙여 표시한다.

SELECT T.ID TOPIC_ID, TITLE, NAME FROM TOPIC T
// 테이블에 T라는 별명을 붙여 명령문 작성시 좀 더 편리하게 사용할 수 있다.
// TOPIC.ID -> T.ID

