BEGIN
 DBMS_OUTPUT.PUT_LINE('HELLO, PL/SQL!!!');
END;

ACCEPT P_USERNAME PROMPT '당신의 이름은 ? : ';
ACCEPT P_JOB PROMPT '당신의 직업은 ? : ';
DECLARE
    ENAME   VARCHAR2(20) := '&P_USERNAME';
    JOB     VARCHAR2(20) := '&P_JOB';
BEGIN
    -- ENAME := 'SMITH';
    -- JOB := 'SALESMAN';
    DBMS_OUTPUT.PUT_LINE(ENAME || '의 직업은' || JOB || '입니다.');
END;


ACCEPT P_DEPTNO PROMPT 'DEPARTMENT NUMBER : ';
ACCEPT P_DNAME PROMPT 'DEPARTMENT NAME : ';
ACCEPT P_LOC PROMPT 'LOCATION : ';
DECLARE
    T_DEPTNO    DEPT.DEPTNO%TYPE := &P_DEPTNO;
    T_DNAME     DEPT.DNAME%TYPE := UPPER('&P_DNAME');
    T_LOC       DEPT.LOC%TYPE := UPPER('&P_LOC');
BEGIN
    INSERT INTO DEPT
    VALUES(T_DEPTNO, T_DNAME, T_LOC);
    COMMIT;
    DBMS_OUTPUT.PUT_LINE('INSERT SUCCESS');
END;


ACCEPT P_EMPNO PROMPT 'EMPLOYEE NUMBER : ';
DECLARE
    V_EMPNO    EMP.EMPNO%TYPE DEFAULT 7788;
    V_RECORD   EMP%ROWTYPE;
BEGIN
    SYS.DBMS_OUTPUT.PUT_LINE('사원 번호  ' || '사원 이름  ' || '직무  ' || '입사 날짜  ');
    SYS.DBMS_OUTPUT.PUT_LINE('--------------------------------------------------------');
    SELECT EMPNO, ENAME, JOB, HIREDATE
    INTO V_EMPNO, V_RECORD.ENAME, V_RECORD.JOB, V_RECORD.HIREDATE
    FROM EMP
    WHERE EMPNO = V_EMPNO;
    SYS.DBMS_OUTPUT.PUT_LINE(V_EMPNO || ' ' || V_RECORD.ENAME || '  ' || V_RECORD.JOB || ' ' || V_RECORD.HIREDATE);
END;

ACCEPT P_NUM PROMPT 'INSERT A NUMBER : ';
DECLARE
    V_NUM NUMBER NOT NULL := &P_NUM;
BEGIN
    IF  V_NUM >= 0 THEN 
        DBMS_OUTPUT.PUT_LINE(V_NUM || ' = ' || '양수입니다.');
    ELSE
        DBMS_OUTPUT.PUT_LINE(V_NUM || ' = ' || '음수입니다.');
    END IF;
END;

DECLARE
    V_YEAR NUMBER := TO_NUMBER(TO_CHAR(SYSDATE, 'YYYY'));
BEGIN
    IF (MOD(V_YEAR, 400) = 0) OR (MOD(V_YEAR,4) =0 AND MOD(V_YEAR, 100) <> 0) THEN 
        DBMS_OUTPUT.PUT_LINE('윤년입니다.');
    ELSE
        DBMS_OUTPUT.PUT_LINE('윤년이 아닙니다.');
    END IF;
END;

ACCEPT P_SEASON PROMPT '당신이 좋아하던 계절 : ';
DECLARE
    V_SEASON    VARCHAR2(6);
BEGIN
    V_SEASON := '&P_SEASON';
    IF V_SEASON = '봄' OR V_SEASON = 'SPRING' THEN
        DBMS_OUTPUT.PUT_LINE('개나리, 진달래');
    ELSIF V_SEASON = '여름' OR V_SEASON = 'SUMMER' THEN
        DBMS_OUTPUT.PUT_LINE('장미, 아카시아');
    ELSIF V_SEASON = '가을' OR V_SEASON = 'FALL' THEN
        DBMS_OUTPUT.PUT_LINE('코스모스, 백합');
    ELSE
        DBMS_OUTPUT.PUT_LINE('동백, 매화');
    END IF;
END;


CREATE TABLE EMP_CLONE(EMPNO, ENAME, SAL, HIREDATE, DEPTNO)
AS
SELECT EMPNO, ENAME, SAL, HIREDATE, DEPTNO
FROM EMP;

SELECT EMPNO, ENAME, SAL, DEPTNO, DECODE(DEPTNO, 10, SAL * 0.1,
                                    20, SAL * 0.2,
                                    30, SAL * 0.3, SAL) AS BONUS
FROM EMP;

DECLARE
    V_EMPNO     EMP.EMPNO%TYPE;
    V_DEPTNO    EMP.DEPTNO%TYPE;
    V_SAL       EMP.SAL%TYPE;
    V_BONUS     EMP.SAL%TYPE;
BEGIN
    SELECT EMPNO, DEPTNO, SAL
    INTO V_EMPNO, V_DEPTNO, V_SAL
    FROM EMP
    WHERE EMPNO = 7788;
    
    IF V_DEPTNO=10 THEN V_BONUS := V_SAL * 0.1;
    ELSIF V_DEPTNO = 20 THEN V_BONUS := V_SAL * 0.2;
    ELSIF V_DEPTNO = 30 THEN V_BONUS := V_SAL * 0.3;
    ELSE V_BONUS := V_SAL;
    END IF;
    DBMS_OUTPUT.PUT_LINE(V_EMPNO || '  ' || V_DEPTNO || '  ' || V_SAL || '  ' || V_BONUS);
END;


ACCEPT P_NAME PROMPT 'NAME : ';
ACCEPT P_KOR PROMPT 'KOREAN : ';
ACCEPT P_ENG PROMPT 'ENGLISH : ';
ACCEPT P_MAT PROMPT 'MATH : '; 
DECLARE
    V_TOT   NUMBER(3);
    V_AVG   NUMBER(4,1);
    V_GRADE CHAR(1);
BEGIN
    V_TOT := &P_KOR + &P_ENG + &P_MAT;
    V_AVG := V_TOT/3;
    CASE
        WHEN V_AVG BETWEEN 90 AND 100 THEN V_GRADE := 'A';
        WHEN V_AVG >= 80 THEN V_GRADE := 'B';
        WHEN V_AVG >= 70 THEN V_GRADE := 'C';
        WHEN V_AVG >= 60 THEN V_GRADE := 'D';
        ELSE V_GRADE := 'F';
    END CASE;
    
    DBMS_OUTPUT.PUT_LINE('&P_NAME' || ' ' || &P_KOR || ' ' ||&P_ENG || ' ' ||&P_MAT|| ' ' ||V_TOT|| ' ' ||V_AVG|| ' ' ||V_GRADE);
END;

REM 반복문

DECLARE
    I   NUMBER := 1;
BEGIN
    LOOP
        DBMS_OUTPUT.PUT_LINE( I || CHR(9) );
        I := I+1;
        EXIT WHEN I>5;
    END LOOP;
END;

DECLARE
    I   NUMBER := 1;
BEGIN
    WHILE I < 6 LOOP
        DBMS_OUTPUT.PUT_LINE( I );
        I := I+1;
    END LOOP;
END;

DECLARE
    V_DEPTNO NUMBER := 10;
    V_DNAME  DEPT.DNAME%TYPE;
    V_LOC    DEPT.LOC%TYPE;
BEGIN
    WHILE V_DEPTNO <= 60 LOOP
         SELECT DNAME, LOC
         INTO V_DNAME, V_LOC
         FROM DEPT
         WHERE DEPTNO = V_DEPTNO;
         DBMS_OUTPUT.PUT_LINE(V_DEPTNO || CHR(9) || V_DNAME || CHR(9) || V_LOC);
         V_DEPTNO := V_DEPTNO + 10;
    END LOOP;
END;

-- 444p 1.
DECLARE
    I   NUMBER;
BEGIN
    FOR I IN 1..10 LOOP
        IF MOD(I, 2) = 1 THEN -- 홀수라면
            DBMS_OUTPUT.PUT_LINE('현재 I의 값 : ' || I);
        END IF;
    END LOOP;
END;

REM STORED PROCEDURE
CREATE OR REPLACE PROCEDURE SP_TEST
IS
    V_STR VARCHAR2(20);
BEGIN
    V_STR := 'HELLO, WORLD';
    DBMS_OUTPUT.PUT_LINE(V_STR);
END;

SELECT * FROM USER_SOURCE WHERE NAME = 'SP_TEST';

CREATE OR REPLACE PROCEDURE SP_EMP_CLONE_DELETE
(
    T_EMPNO IN EMP.EMPNO%TYPE
)
IS
BEGIN
    DELETE FROM EMP_CLONE
    WHERE EMPNO = T_EMPNO;
    commit;
END;

CREATE OR REPLACE PROCEDURE SP_DEPT_SELECT
IS
    V_DEPTNO    DEPT.DEPTNO%TYPE;
    V_DNAME     DEPT.DNAME%TYPE;    
    V_LOC       DEPT.LOC%TYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('부서번호' || CHR(9) || '부서명' || CHR(9) || '부서 위치');
    DBMS_OUTPUT.PUT_LINE('----------------------------------------');
    FOR I IN 1..6 LOOP
        SELECT DEPTNO, DNAME, LOC
        INTO    V_DEPTNO, V_DNAME, V_LOC
        FROM    DEPT
        WHERE   DEPTNO = I *10;
        DBMS_OUTPUT.PUT_LINE(V_DEPTNO || CHR(9) || V_DNAME || CHR(9) || V_LOC);
    END LOOP;
END;



DROP TABLE MEMBER;
CREATE TABLE MEMBER
(
    USERID  VARCHAR2(12) CONSTRAINT MEMBER_USERID_PK PRIMARY KEY,
    PASSWD  VARCHAR2(8)  CONSTRAINT MEMBER_PASSWD_NN NOT NULL,
    NAME    VARCHAR2(20) CONSTRAINT MEMBER_NAME_NN NOT NULL,
    CITY    VARCHAR2(10) CONSTRAINT MEMBER_CITY_NN NOT NULL,
    GENDER  VARCHAR2(6)     CONSTRAINT MEMBER_GENDER_NN NOT NULL,
    CONSTRAINT MEMBER_CITY_CK CHECK(CITY IN('서울','부산','대전','인천','대구','광주','울산')),
    CONSTRAINT MEMBER_GENDER_CK CHECK(GENDER IN('남성','여성'))
);

ACCEPT P_USERID PROMPT 'USER ID : ';
ACCEPT P_PASSWD PROMPT 'PASSWORD : ';
ACCEPT P_NAME   PROMPT 'NAME : ';
ACCEPT P_CITY   PROMPT 'CITY : ';
ACCEPT P_GENDER PROMPT 'GENDER(1:남성, 0:여성) : ';

DECLARE 
    V_USERID MEMBER.USERID%TYPE := '&P_USERID';
    V_PASSWD MEMBER.PASSWD%TYPE := '&P_PASSWD';
    V_NAME   MEMBER.NAME%TYPE := '&P_NAME';
    V_CITY   MEMBER.CITY%TYPE := '&P_CITY';
    V_GENDER CHAR(1) := '&P_GENDER'; -- 1 or 0
    T_GENDER MEMBER.GENDER%TYPE;
BEGIN
    IF V_GENDER ='1' THEN T_GENDER := '남성';
    ELSE T_GENDER := '여성';
    END IF;
    
    INSERT INTO MEMBER
    VALUES(V_USERID, V_PASSWD, V_NAME, V_CITY, T_GENDER);
    COMMIT;
END;


ACCEPT P_EMPNO PROMPT '사원 번호 : ';
DECLARE 
    V_EMPNO EMP.EMPNO%TYPE := &P_EMPNO;
    V_ENAME EMP.ENAME%TYPE;
    V_HIREDATE EMP.HIREDATE%TYPE;
BEGIN
    SELECT ENAME, HIREDATE
    INTO    V_ENAME, V_HIREDATE
    FROM EMP
    WHERE EMPNO = V_EMPNO;
    DBMS_OUTPUT.PUT_LINE('사원의 이름' || ' | ' || '입사날짜' );
    DBMS_OUTPUT.PUT_LINE(V_ENAME || ' | ' || TO_CHAR(V_HIREDATE, 'YYYY-MM-DD') );
END;


ACCEPT P_NAME PROMPT 'NAME : ';
DECLARE 
    V_ENAME EMP.ENAME%TYPE := '&P_NAME';
    V_RECORD EMP%ROWTYPE;
BEGIN
    SELECT *
    INTO V_RECORD
    FROM EMP
    WHERE ENAME = UPPER(V_ENAME);
    DBMS_OUTPUT.PUT_LINE(V_RECORD.EMPNO || ' ' ||V_RECORD.SAL || ' ' || V_RECORD.HIREDATE);
END;

CREATE SEQUENCE EMP_EMPNO_SEQ
    START WITH 9000
    INCREMENT BY 1
    MAXVALUE 9999
    NOCYCLE;

ACCEPT P_NAME PROMPT 'NAME : ' ;
ACCEPT P_SAL PROMPT 'SALARY : ';
ACCEPT P_DEPTNO PROMPT 'DEPARTMENT NUMBER : ';
DECLARE
    V_ENAME EMP.ENAME%TYPE  := '&P_NAME';
    V_SAL EMP.SAL%TYPE      := &P_SAL;
    V_DEPTNO EMP.DEPTNO%TYPE := &P_DEPTNO;
BEGIN
    IF V_DEPTNO = 10 THEN
        V_SAL := V_SAL*1.2;
    END IF;
    
    INSERT INTO EMP(EMPNO, ENAME, SAL, DEPTNO)
    VALUES(EMP_EMPNO_SEQ.NEXTVAL, V_ENAME, V_SAL, V_DEPTNO);
    COMMIT;
END;

ACCEPT P_ENAME PROMPT 'NAME : ' ;
DECLARE
    V_ENAME EMP.ENAME%TYPE  := UPPER('&P_ENAME');
    V_SAL EMP.SAL%TYPE;
    V_JOB EMP.JOB%TYPE;
BEGIN
    SELECT JOB, SAL INTO V_JOB, V_SAL
    FROM EMP
    WHERE ENAME = V_ENAME;

    IF V_JOB IN ('MANAGER', 'ANALYST') THEN
        V_SAL := V_SAL*1.5;
    ELSE V_SAL := V_SAL*1.2;
    END IF;
    
    UPDATE EMP
    SET SAL = V_SAL
    WHERE ENAME = V_ENAME;
    COMMIT;
END;

------------------------------------------------------

CREATE OR REPLACE PROCEDURE SP_EMP_DEPT_SELECT
(
    V_ENAME IN EMP.ENAME%TYPE,
    V_DNAME OUT DEPT.DNAME%TYPE,
    V_SAL OUT EMP.SAL%TYPE
)
IS
BEGIN
    SELECT DNAME, SAL
    INTO V_DNAME, V_SAL
    FROM EMP INNER JOIN DEPT USING (DEPTNO)
    WHERE ENAME = V_ENAME;
END;


DECLARE
    G_DNAME DEPT.DNAME%TYPE;
    G_SAL EMP.SAL%TYPE;
BEGIN
    SP_EMP_DEPT_SELECT('SCOTT', G_DNAME, G_SAL);
    DBMS_OUTPUT.PUT_LINE('Scott가 근무하는 부서는 ' || G_DNAME || '이고, 봉급은 ' || G_SAL || '입니다.');
END;


CREATE OR REPLACE PROCEDURE SP_ZIPCODE_SELECT
(
    V_DONGNAME IN ZIPCODE.DONG%TYPE,
    V_RESULT OUT VARCHAR2
)
IS
    V_ZIPCODE   ZIPCODE.ZIPCODE%TYPE;
    V_SIDO  ZIPCODE.SIDO%TYPE;
    V_GUGUN     ZIPCODE.GUGUN%TYPE;
    V_DONG     ZIPCODE.DONG%TYPE;
    V_BUNJI     ZIPCODE.BUNJI%TYPE;
BEGIN
    SELECT ZIPCODE, SIDO, GUGUN, DONG, BUNJI
    INTO V_ZIPCODE, V_SIDO, V_GUGUN, V_DONG, V_BUNJI
    FROM ZIPCODE
    WHERE DONG = V_DONGNAME;
    V_RESULT := '(' || V_ZIPCODE || ')' || V_SIDO || ' ' || V_GUGUN || ' ' || V_DONG || ' ' || V_BUNJI;
END;

-- IN OUT

CREATE OR REPLACE PROCEDURE SP_TEST
IS
    V_STR VARCHAR2(100);
BEGIN
    V_STR := '나의 이름은 한지민입니다';
    DBMS_OUTPUT.PUT_LINE(V_STR);
END;

CREATE OR REPLACE PROCEDURE SP_TEST_V1
(
    V_NAME IN VARCHAR2
)
IS
    V_STR VARCHAR2(100);
BEGIN
    V_STR := '나의 이름은 ' || V_NAME || '입니다';
    DBMS_OUTPUT.PUT_LINE(V_STR);
END;

CREATE OR REPLACE PROCEDURE SP_TEST_V2
(
    V_NAME IN VARCHAR2,
    V_STR OUT VARCHAR2
)
IS
BEGIN
    V_STR := '나의 이름은 ' || V_NAME || '입니다';
END;

CREATE OR REPLACE PROCEDURE SP_TEST_V3
(
    V_STR IN OUT VARCHAR2
)
IS
BEGIN
    V_STR := '나의 이름은 ' || V_STR || '입니다';
END;

ACCEPT P_STR PROMPT '귀하의 성함은 : ';
DECLARE
    G_STR VARCHAR(100) := '&P_STR';
BEGIN
    SP_TEST_V3(G_STR);
    DBMS_OUTPUT.put_line(G_STR);
END;

CREATE OR REPLACE PROCEDURE SP_GUGUDAN
(
    V_DAN IN NUMBER DEFAULT 1,
    V_max IN NUMBER DEFAULT 9
)
IS
    I NUMBER;
BEGIN
    FOR I IN 1..v_max LOOP
        DBMS_OUTPUT.PUT_LINE(V_DAN || ' x ' || I || ' = ' || V_DAN * I);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE SP_EMP_CLONE_INSERT
(
    V_EMPNO IN EMP_CLONE.EMPNO%TYPE,
    V_ENAME IN EMP_CLONE.ENAME%TYPE,
    V_JOB   IN EMP_CLONE.JOB%TYPE DEFAULT 'CLERK',
    V_HIREDATE IN EMP_CLONE.HIREDATE%TYPE DEFAULT SYSDATE
)
IS
BEGIN
    INSERT INTO EMP_CLONE
    VALUES(V_EMPNO, V_ENAME, V_JOB, V_HIREDATE);
    COMMIT;
END;

-- PROCEDURE 삭제
DROP PROCEDURE EMP_INPUT;


